@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json;
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json
@using projekt.Shared.Models


<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }
    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .logoimage{
		width:150px;
		height:150px;
		float:left;
        padding-left:10px;
		}
		.info
		{
		float:left;
		}
		.infocontainer{
		overflow: hidden;
		color:rgb(39, 169, 211);
        font-size:18px;
		}
		.infotext{
		padding-right:10px;
        font-size:14px;
		}

       

        
</style>

<h1>Dashboard</h1>
<button class="btn btn-primary" @onclick="BeginSignOut">LOGOUT</button>
<P>content</P>
<input type="text" class="searchCompany" @bind="search" />
<button class="btn btn-primary" @onclick="ShowAutoFill">SEARCH</button>
<button class="btn btn-primary" >WATCHLIST</button>


@if (Tickers == null)
{
   
}
else
{
   @if(showTable)
   {

    <table class="table">
       @foreach(var s in Tickers)
       {
       <tr>
           <td @onclick="@(e=>ShowDetails(s.Ticker))">@s.Name</td>
           
       </tr>
       
       }

   </table>
    }
  
    if (TickerDetails == null)
    {
        
    }
    else
    {
        <div class="infocontainer">
	<div class="obrazek">
		<img class="logoimage" alt="Image not found" src="@logoUrl" />
	</div>
	<div info>
	<h2>@TickerDetails.Name (@TickerDetails.Ticker)</h2>
	<h3><span class="infotext">Country:@TickerDetails.Locale</span> <span class="infotext">Industry:@TickerDetails.sic_description</span></h3>
	
	</div>
  </div>


   
   
   

 <div class="stock-chart">
   

<SfStockChart  EnablePeriodSelector="true">
    <StockChartTooltipSettings Enable="false"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="false"></StockChartCrosshairSettings>
    <StockChartPeriods>
        <StockChartPeriod IntervalType=RangeIntervalType.Days Interval="1" Text='current day'></StockChartPeriod>
        <StockChartPeriod IntervalType=RangeIntervalType.Days Interval="7" Text='1 week ago'></StockChartPeriod>
        <StockChartPeriod IntervalType=RangeIntervalType.Days Interval="30" Text='1 month ago'></StockChartPeriod>
        <StockChartPeriod IntervalType=RangeIntervalType.Days Interval="90" Text='3 month ago' Selected="true"></StockChartPeriod>
        <StockChartPeriod Text="1D"></StockChartPeriod>
    </StockChartPeriods>

    <StockChartSeriesCollection>
        <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.HiloOpenClose" 
        XName="x" YName="close" High="high" Low="low" Open="open" Close="close" Volume="volume"></StockChartSeries>
    </StockChartSeriesCollection>
</SfStockChart>
</div>
    }
}


@code {

  
   
    private List<ChartData> DataSource=new List<ChartData>();

    public class ChartData
    {
        public DateTime x { get; set; }
        public Double open { get; set; }
        public Double low { get; set; }
        public Double close { get; set; }
        public Double high { get; set; }
        public Double volume { get; set; }
    }
   



    public List<TickerData> Tickers;
    public List<Stock> StocksList;
    public TickerDetails TickerDetails { get; set; }
    public string logoUrl = "";
    public string search = "";
    public string date = "2022-03-26";
    public bool showTable = true;


    public async Task ShowDetails(string tickerCode)
    {

        try
        {
            showTable=false; 
            var HttpClient = new HttpClient();
            var result = await HttpClient.GetAsync("https://localhost:44301/api/Ticker/details/"+tickerCode);
            var data = await result.Content.ReadAsStringAsync();

            TickerDetails=JsonConvert.DeserializeObject<TickerDetails>(data);
            logoUrl = TickerDetails.Branding.icon_url+"?apiKey=9pFjWPppUCFwVZ4WlFsSUlXrpFniSKEO";

            HttpClient = new HttpClient();
            result = await HttpClient.GetAsync("https://localhost:44301/api/Ticker/stocks/" + tickerCode+"/"+date);
            data = await result.Content.ReadAsStringAsync();
            StocksList=JsonConvert.DeserializeObject<List<Stock>>(data);
                 
            foreach (Stock s in StocksList)
            {
                DataSource.Add( new ChartData { 
                    x = s.date,
                    open=s.O,
                    low=s.L,
                    close=s.C,
                    high=s.H,
                    volume=s.V
                });
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }


    public async Task ShowAutoFill()
    {
        try
        {
            showTable = true;
            var HttpClient = new HttpClient();
            var result = await HttpClient.GetAsync("https://localhost:44301/api/ticker/"+search);
            var data = await result.Content.ReadAsStringAsync();

           Tickers=JsonConvert.DeserializeObject<List<TickerData>>(data);
          
            
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    
    }


    protected override async Task OnInitializedAsync()
    {
        
    }
     private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
      
        Navigation.NavigateTo("/");
    }


}
