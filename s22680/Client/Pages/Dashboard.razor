@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json;
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Charts
@using FourRoads.TelligentCommunity.ThemeHelper
@using System.Net.Http.Json
@using Syncfusion.Blazor.Calendars

<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }
    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .logoimage{
		width:150px;
		height:150px;
		float:left;
        padding-left:
		}
		.info
		{
		float:left;
		}
		.infocontainer{
		overflow: hidden;
		color:rgb(39, 169, 211);
        font-size:18px;
		}
		.infotext{
		padding-right:10px;
        font-size:14px;
		}

        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }
        .stockchartdiv {
            visibility: hidden;
        }
</style>

<h1>Dashboard</h1>
<button class="btn btn-primary" @onclick="BeginSignOut">LOGOUT</button>
<P>content</P>
<input type="text" class="searchCompany" @bind="search" />
<button class="btn btn-primary" @onclick="ShowAutoFill">SEARCH</button>
<button class="btn btn-primary" >WATCHLIST</button>


@if (Tickers == null)
{
   
}
else
{
   @if(showTable)
   {

    <table class="table">
       @foreach(var s in Tickers)
       {
       <tr>
           <td @onclick="@(e=>ShowDetails(s.Ticker))">@s.Name</td>
           
       </tr>
       
       }

   </table>
    }
  
    if (TickerDetails == null)
    {
        
    }
    else
    {
        <div class="infocontainer">
	<div class="obrazek">
		<img class="logoimage" alt="Image not found" src="@logoUrl" />
	</div>
	<div info>
	<h2>@TickerDetails.Name (@TickerDetails.Ticker)</h2>
	<h3><span class="infotext">Country:@TickerDetails.Locale</span> <span class="infotext">Industry:@TickerDetails.sic_description</span></h3>
	
	</div>
  </div>


     <table class="table">
       @foreach(var c in DataSource)
       {
       <tr>
           <td>@c.x</td>
            <td>@c.low</td>
             <td>@c.high</td>
              <td>@c.open</td>
               <td>@c.close</td>
           
       </tr>
       }
   </table>


   

   <SfCheckBox Indeterminate="true" Disabled="true" Label="Indeterminate, Disabled" TChecked="bool"></SfCheckBox>


   <SfCalendar TValue="DateTime"></SfCalendar>



    }



}


@code {

   
    Theme theme = Theme.Bootstrap4;


    private ChartData[] DataSource;

    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";



    
        
    






    public List<TickerData> Tickers;
    public List<Stock> StocksList;
    public TickerDetails TickerDetails { get; set; }
    public string logoUrl = "";
    public string search = "";
    public string date = "2022-06-19";
    public bool showTable = true;



    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }


    public async Task ShowDetails(string tickerCode)
    {

        try
        {
            showTable=false; 
            var HttpClient = new HttpClient();
            var result = await HttpClient.GetAsync("https://localhost:44328/api/Ticker/details/"+tickerCode);
            var data = await result.Content.ReadAsStringAsync();

            TickerDetails=JsonConvert.DeserializeObject<TickerDetails>(data);
            logoUrl = TickerDetails.Branding.icon_url+"?apiKey=9pFjWPppUCFwVZ4WlFsSUlXrpFniSKEO";


            HttpClient = new HttpClient();
            result = await HttpClient.GetAsync("https://localhost:44328/api/Ticker/stocks/" + tickerCode+"/"+date);
            data = await result.Content.ReadAsStringAsync();
            StocksList=JsonConvert.DeserializeObject<List<Stock>>(data);

            DataSource =new ChartData[StocksList.Count];
            int i = 0;
            foreach (Stock s in StocksList)
            {
                DataSource[i] = new ChartData { 
                    x = s.date,
                    open=s.O,
                    low=s.L,
                    close=s.C,
                    high=s.H,
                    volume=s.V
                };
                i++;

            }

            




        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }


    public async Task ShowAutoFill()
    {
        try
        {
            showTable = true;
            var HttpClient = new HttpClient();
            var result = await HttpClient.GetAsync("https://localhost:44328/api/ticker/"+search);
            var data = await result.Content.ReadAsStringAsync();

           Tickers=JsonConvert.DeserializeObject<List<TickerData>>(data);
          
            
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    
    }


    protected override async Task OnInitializedAsync()
    {
        
    }
     private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
      
        Navigation.NavigateTo("/");
    }


}
